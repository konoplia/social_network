openapi: 3.0.3
info:
  title: DRF
  version: 0.0.0
paths:
  /analytics/likes_counter/:
    get:
      operationId: analytics_likes_counter_list
      tags:
      - analytics
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Analitic'
          description: ''
  /auth/register/:
    get:
      operationId: auth_register_list
      tags:
      - auth
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CustomUser'
          description: ''
    post:
      operationId: auth_register_create
      tags:
      - auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CustomUser'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/CustomUser'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/CustomUser'
        required: true
      security:
      - jwtAuth: []
      - {}
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomUser'
          description: ''
  /auth/token/:
    post:
      operationId: auth_token_create
      description: |-
        Takes a set of user credentials and returns an access and refresh JSON web
        token pair to prove the authentication of those credentials.
      tags:
      - auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenObtainPair'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TokenObtainPair'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/TokenObtainPair'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenObtainPair'
          description: ''
  /auth/token/refresh/:
    post:
      operationId: auth_token_refresh_create
      description: |-
        Takes a refresh type JSON web token and returns an access type JSON web
        token if the refresh token is valid.
      tags:
      - auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenRefresh'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TokenRefresh'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/TokenRefresh'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenRefresh'
          description: ''
  /blog/post/:
    get:
      operationId: blog_post_list
      tags:
      - blog
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Post'
          description: ''
    post:
      operationId: blog_post_create
      tags:
      - blog
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Post'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Post'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Post'
        required: true
      security:
      - jwtAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'
          description: ''
  /blog/post/{id}/:
    get:
      operationId: blog_post_retrieve
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - blog
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RetrieveUpdateDestroyPost'
          description: ''
    put:
      operationId: blog_post_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - blog
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RetrieveUpdateDestroyPost'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/RetrieveUpdateDestroyPost'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/RetrieveUpdateDestroyPost'
        required: true
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RetrieveUpdateDestroyPost'
          description: ''
    patch:
      operationId: blog_post_partial_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - blog
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedRetrieveUpdateDestroyPost'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedRetrieveUpdateDestroyPost'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedRetrieveUpdateDestroyPost'
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RetrieveUpdateDestroyPost'
          description: ''
    delete:
      operationId: blog_post_destroy
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - blog
      security:
      - jwtAuth: []
      responses:
        '204':
          description: No response body
  /blog/post/{id}/dis_like/:
    put:
      operationId: blog_post_dis_like_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - blog
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostDisLike'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PostDisLike'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PostDisLike'
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostDisLike'
          description: ''
    patch:
      operationId: blog_post_dis_like_partial_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - blog
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedPostDisLike'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedPostDisLike'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedPostDisLike'
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostDisLike'
          description: ''
  /blog/post/{id}/like/:
    put:
      operationId: blog_post_like_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - blog
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostLike'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PostLike'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PostLike'
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostLike'
          description: ''
    patch:
      operationId: blog_post_like_partial_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - blog
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedPostLike'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedPostLike'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedPostLike'
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostLike'
          description: ''
components:
  schemas:
    Analitic:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        content:
          type: string
          maxLength: 2000
        create_date:
          type: string
          format: date-time
          readOnly: true
        user:
          type: integer
        likes:
          type: array
          items:
            type: integer
        dis_likes:
          type: array
          items:
            type: integer
      required:
      - content
      - create_date
      - dis_likes
      - id
      - likes
      - user
    CustomUser:
      type: object
      properties:
        username:
          type: string
          description: Required. 150 characters or fewer. Letters, digits and @/./+/-/_
            only.
          pattern: ^[\w.@+-]+$
          maxLength: 150
        password:
          type: string
          writeOnly: true
          maxLength: 128
        id:
          type: integer
          readOnly: true
        email:
          type: string
          format: email
          title: Email address
          maxLength: 254
      required:
      - email
      - id
      - password
      - username
    PatchedPostDisLike:
      type: object
      properties:
        dis_like:
          type: string
          readOnly: true
    PatchedPostLike:
      type: object
      properties:
        like:
          type: string
          readOnly: true
    PatchedRetrieveUpdateDestroyPost:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        likes:
          type: string
          readOnly: true
        dis_likes:
          type: string
          readOnly: true
        is_liked:
          type: string
          readOnly: true
        is_dis_liked:
          type: string
          readOnly: true
        content:
          type: string
          maxLength: 2000
        create_date:
          type: string
          format: date-time
          readOnly: true
        user:
          type: integer
          readOnly: true
    Post:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        likes:
          type: string
          readOnly: true
        dis_likes:
          type: string
          readOnly: true
        is_liked:
          type: string
          readOnly: true
        is_dis_liked:
          type: string
          readOnly: true
        content:
          type: string
          maxLength: 2000
        create_date:
          type: string
          format: date-time
          readOnly: true
        user:
          type: integer
          readOnly: true
      required:
      - content
      - create_date
      - dis_likes
      - id
      - is_dis_liked
      - is_liked
      - likes
      - user
    PostDisLike:
      type: object
      properties:
        dis_like:
          type: string
          readOnly: true
      required:
      - dis_like
    PostLike:
      type: object
      properties:
        like:
          type: string
          readOnly: true
      required:
      - like
    RetrieveUpdateDestroyPost:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        likes:
          type: string
          readOnly: true
        dis_likes:
          type: string
          readOnly: true
        is_liked:
          type: string
          readOnly: true
        is_dis_liked:
          type: string
          readOnly: true
        content:
          type: string
          maxLength: 2000
        create_date:
          type: string
          format: date-time
          readOnly: true
        user:
          type: integer
          readOnly: true
      required:
      - content
      - create_date
      - dis_likes
      - id
      - is_dis_liked
      - is_liked
      - likes
      - user
    TokenObtainPair:
      type: object
      properties:
        username:
          type: string
          writeOnly: true
        password:
          type: string
          writeOnly: true
        access:
          type: string
          readOnly: true
        refresh:
          type: string
          readOnly: true
      required:
      - access
      - password
      - refresh
      - username
    TokenRefresh:
      type: object
      properties:
        access:
          type: string
          readOnly: true
        refresh:
          type: string
          writeOnly: true
      required:
      - access
      - refresh
  securitySchemes:
    jwtAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
